const express = require("express");
const path = require("path");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const app = express();
const dbPath = path.join(__dirname, "twitterClone.db");
app.use(express.json());
let db = null;

const initializationDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log(`Server Running at http://localhost:3000/`);
    });
  } catch (e) {
    console.log(`DB Error: ${e.message}`);
    process.exit(1);
  }
};

initializationDbAndServer();

//getting user following people id`s

const getFollowingPeoplesIdsOfUser = async (username) => {
  const getFollowingPeopleQuery = `
        SELECT 
            following_user_id 
        FROM 
            follower INNER JOIN user
            ON user.user_id = follower.follower_user_id
        WHERE
            user.username = '${username}';`;
  const followingPeople = await db.all(getFollowingPeopleQuery);
  const arrayOfIds = followingPeople.map(
    (eachUser) => eachUser.following_user_id
  );
  return arrayOfIds;
};

// tweet access

const tweetAccessVerification = async (request, response, next) => {
  const { userId } = request;
  const { tweetId } = request.params;
  const getTweetQuery = `
        SELECT *
        FROM tweet INNER JOIN follower
        ON tweet.user_id = follower.following_user_id
        WHERE tweet.tweet_id = '${tweetId}' AND follower_user_id = '${userId}';`;
  const tweet = await db.get(getTweetQuery);
  if (tweet === undefined) {
    response.status(401);
    response.send("Invalid Request");
  } else {
    next();
  }
};

const validPassword = (password) => {
  return password.length > 6;
};

// token

const authentication = (request, response, next) => {
  let jwtToken;
  authHeader = request.headers["authorization"];
  if (authHeader !== undefined) {
    jwtToken = authHeader.split(" ")[1];
  }
  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid JWT Token");
  } else {
    jwt.verify(jwtToken, "asdfghjkl", async (error, payload) => {
      if (error) {
        response.status(401);
        response.send("Invalid JWT Token");
      } else {
        request.username = payload.username;
        request.user_id = payload.userId;
        next();
      }
    });
  }
};

//register - api1

app.post("/register/", async (request, response) => {
  const { username, password, name, gender } = request.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const getQuery = `
        SELECT *
        FROM user
        WHERE username = '${username}';`;
  dbUser = await db.get(getQuery);
  if (dbUser === undefined) {
    const createQuery = `
            INSERT INTO 
               user(username, password, name, gender)
            VALUES(
                '${username}',
                '${hashedPassword}',
                '${name}',
                '${gender}'
            );`;
    if (validPassword(password)) {
      await db.run(createQuery);
      response.send("User created successfully");
    } else {
      response.status(400);
      response.send("Password is too short");
    }
  } else {
    response.status(400);
    response.send("User already exists");
  }
});

//login- api2
app.post("/login", async (request, response) => {
  const { username, password } = request.body;
  const loginQuery = `
    SELECT
        *
    FROM
        user
    WHERE
        username = '${username}';`;
  dbResponse = await db.get(loginQuery);
  if (dbResponse === undefined) {
    response.status(400);
    response.send("Invalid user");
  } else {
    const isPasswordMatched = await bcrypt.compare(
      password,
      dbResponse.password
    );
    if (isPasswordMatched === true) {
      const payload = { username: username };
      const jwtToken = jwt.sign(payload, "asdfghjkl");
      response.send({ jwtToken });
    } else {
      response.status(400);
      response.send("Invalid password");
    }
  }
});

//api-3

app.get("/user/tweets/feed/", authentication, async (request, response) => {
  const { username } = request;
  const followingPeopleIds = await getFollowingPeoplesIdOfUser(username);
  const getTweetsQuery = `
      SELECT username,tweet,date_time AS dateTime
      FROM user INNER JOIN tweet ON user.user_id = tweet.user_id
      WHERE
           user.user_id IN (${followingPeopleIds})
      ORDER BY date_time DESC
      LIMIT 4;`;
  const tweets = await db.all(getTweetsQuery);
  response.send(tweets);
});

// api4

app.get("/user/following/", authentication, async (request, response) => {
  const { username, userId } = request;
  const getFollowingUsersQuery = `
        SELECT name 
        FROM follower
        INNER JOIN user
        ON user.user_id = follower.following_user_id
        WHERE follower_user_id = '${userId}';`;
  const followingPeople = await db.all(getFollowingUsersQuery);
  response.send(followingPeople);
});

//api5

app.get("/user/followers/", authentication, async (request, response) => {
  const { username, userId } = request;
  const getFollowerQuery = `
        SELECT  DISTINCT name
        FROM follower INNER JOIN user
        ON user.user_id = follower.follower_user_id
    WHERE following_user_id = '${userId}';`;
  const followers = await db.all(getFollowerQuery);
  response.send(followers);
});

// api6

app,get(" /tweets/:tweetId/",authentication,tweetAccessVerification,,async(request,response)=>{
    const {username,userId} = request;
    const {tweetId} = request.params;
    const getTweetQuery = `
    SELECT tweet,
    (SELECT COUNT() FROM like WHERE tweet_id = '${tweetId}') AS likes,
    (SELECT COUNT() FROM reply WHERE tweet_id = '${tweetId}') AS replies,
    date_time AS dateTime,
    FROM tweet
    WHERE tweet.tweet_id = '${tweetId}';`;
    const tweet = await db.get(getTweetQuery);
    response.send(tweet);
});

//api 7

app.get("/tweets/:tweetId/likes/",authentication, tweetAccessVerification, async(request,response)=>{
    const{tweetId} = request.params;
    const getLikesQuery = `
    SELECT username
    FROM user INNER JOIN like ON 
    user.user_id = like.user_id
    WHERE tweet_id ='${tweetId}';`;
    const likes = await db.all(getLikesQuery);
    const likesArray = likes.map((eachLike)=>
        eachLike.username);
    response.send({likes:likesArray});
});

//api 8

app.get("/tweets/:tweetId/replies/", authentication, tweetAccessVerification, async(request,response)=>{
    const {tweetId} = request.params;
    const getRepliedQuery = `
    SELECT name,reply
    FROM user INNER JOIN reply
    ON user.user_id = reply.user_id
    WHERE tweet_id = '${tweetId}';`;
    const replies = await db.all(getRepliedQuery);
    response.send({replies:replies});

});

//api9

app.get("/user/tweets/",authentication,async(request,response)=>{
    const{userId} = request
    const getTweetsQuery = `
    SELECT
    tweet,
    COUNT(DISTINCT like_id) AS likes,
    COUNT(DISTINCT reply_id) AS replies,
    data_time AS dateTime
    FROM tweet LEFT JOIN reply
    ON tweet.tweet_id = reply.tweet_id
    LEFT JOIN like ON tweet.tweet_id = like.tweet_id
    WHERE tweet_id = ${userId}
    GROUP BY tweet.tweet_id;`;
    const tweets = await db.all(getTweetsQuery);
    response.send(tweets);
});

// api 10

app.post("/user/tweets/",authentication,async(request,response)=>{
    const {tweet} = request.body;
    const userId = parseInt(request.userId);
    const dateTime = new Date().toJSON().substring(0,19).replace("T"," ");
    const createTweetQuery = `
        INSERT INTO tweet(tweet,user_id,date_time)
        VALUES(
            '${tweet}',
            '${userId}',
            '${dateTime}'
        );`;
    await db.run(createTweetQuery);
    response.send("Created a Tweet");
});

//api 11

app.delete("/tweets/:tweetId/",authentication,async(request,response)=>{
    const {tweetId} = request.params;
    const {userId} = request;
    const getTheTweetQuery = `
    SELECT *
    FROM tweet
    WHERE user_id = ${userId};`;
    const getDbTweet = await db.get(getTheTweetQuery);
    if(getDbTweet === undefined){
        response.status(401);
        response.send("Invalid Request");
    }
    else{
        const deleteQuery = `
        DELETE FROM tweet
        WHERE tweet_id = '${tweetId}';`;
        await db.run(deleteQuery);
        response.send("Tweet Removed");
    }
});

module.exports = app;
